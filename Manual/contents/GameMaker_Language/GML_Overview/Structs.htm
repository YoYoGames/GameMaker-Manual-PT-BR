<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Estruturas e Construtores</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Structs" />
  <meta name="rh-index-keywords" content="Structs" />
  <meta name="search-keywords" content="structs,new,delete,struct" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Estruturas e Construtores</h1>
  <p>Uma <strong>estrutura </strong>é uma variável que contém um conjunto de outras variáveis. As variáveis que um <span class="notranslate">struct</span> contém podem ser de qualquer <a href="Data_Types.htm">tipo de dado</a> mencionado anteriormente e estas variáveis podem ser lidas e escritas após a declaração inicial <span class="notranslate">struct</span>, e você também pode adicionar mais variáveis a um <span class="notranslate">struct</span> após ter sido declarado.</p>
  <p>As variáveis utilizadas em um <span class="notranslate">struct</span> devem seguir o esquema usual de nomenclatura de variáveis, ou seja: elas não podem começar com um número e devem ser compostas apenas por caracteres alfanuméricos e o caracter &quot;_&quot; sublinhado, e também observar que o conteúdo de um <span class="notranslate">struct</span> é <em>independente da instância ou função que o criou</em>, e como tal você pode - se desejar - utilizar nomes de variáveis embutidos, como <span class="inline">image_index</span> ou <span class="inline">x</span> e <span class="inline">y</span>.</p>
  <p>Após a criação inicial, <span class="notranslate">structs</span> não tem nenhuma sobrecarga de processamento enquanto eles existirem, embora ocupem espaço na memória. A sintaxe do <span class="notranslate">struct</span> é a seguinte:</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br />
    {<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
        etc...<br />
    };
  </p>
  <p>Portanto, um exemplo disso na prática seria:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    };</p>
  <p>O código acima cria um escopo de instância <span class="notranslate">struct</span> na variável <span class="inline">mystruct</span> e o preenche com alguns valores (<span class="notranslate">structs</span> pode ser criado nos escopos local, instância e global, como qualquer outra variável - veja a seção sobre <a href="Variables_And_Variable_Scope.htm">Variáveis e Escopo de Variável</a> para mais informações). Note que você não precisa preencher o conteúdo de um <span class="notranslate">struct</span> quando ele é criado inicialmente e você pode criar um <span class="notranslate">struct</span> vazio simplesmente fazendo isso:</p>
  <p class="code">mystruct = {};</p>
  <p>Variáveis podem então ser adicionadas a este <span class="notranslate">struct</span> em um ponto posterior do código do jogo. Para adicioná-las depois você usa o operador de pontos (da mesma forma que em <a href="Addressing_Variables_In_Other_Instances.htm">endereçamento de variáveis em outras instâncias</a>): </p>
  <p class="code">mystruct.newItem = &quot;Some Text&quot;;</p>
  <p>Isto tem o mesmo resultado que inicializar o <span class="notranslate">struct</span> desta forma: </p>
  <p class="code">mystruct =<br />
    {<br />
        newItem : &quot;Some Text&quot;<br />
    };</p>
  <p>Aqui está um exemplo de um <span class="notranslate">struct</span> com várias variáveis e tipos de dados:</p>
  <p class="code">var _xx = 100;<br />
    mystruct =<br />
    {<br />
        a : 10,<br />
        b : &quot;Hello World&quot;,<br />
        c : int64(5),<br />
        d : _xx + 50,<br />
        e : function(a, b)<br />
            {<br />
                return a + b;<br />
            },<br />
        f : [ 10, 20, 30, 40, 50 ],<br />
        g : image_index<br />
    };</p>
  <p>Você notará no código acima que você também pode definir métodos e usar <span class="notranslate">runtime</span> funções em <span class="notranslate">structs</span>, e também pode usar variáveis locais e de instância dentro da declaração <span class="notranslate">struct</span>.</p>
  <h3 id="inst_in_struct">Variáveis de instância em <span class="notranslate">Struct</span> Declaração?</h3>
  <p>Por exemplo, você notará no exemplo acima que a variável <span class="notranslate">struct</span> &quot;g&quot; está sendo configurada para <span class="inline">image_index</span>, que é uma variável de instância. Você pode pensar que precisaria usar a <a href="Instance_Keywords.htm">palavra-chave</a> <span class="inline">other</span> neste caso para obter a variável de instância, mas isto não é necessário. Essencialmente, quando você define uma estrutura<strong>, todas as variáveis membros no lado esquerdo dos dois pontos &quot;:&quot; são as variáveis <em>estruturais</em></strong>, e os valores e variáveis no lado direito usam o escopo do que quer que seja que esteja definindo a estrutura (neste caso, uma instância). </p>
  <p>Vejamos um exemplo simples para ilustrar isto. Digamos que você quer definir um <span class="notranslate">struct</span> com as variáveis &quot;x&quot; e &quot;y&quot; e quer defini-las para o &quot;x&quot; e &quot;y&quot; da instância que define o <span class="notranslate">struct</span>. Na prática, o código ficaria assim:</p>
  <p class="code">mystruct =<br />
    {<br />
        x : x,<br />
        y : y<br />
    };</p>
  <p>No código acima, as variáveis de membro <span class="notranslate">struct</span> <span class="inline">x</span> e <span class="inline">y</span> estão sendo definidas para os valores mantidos na instância variáveis <span class="inline">x</span> e <span class="inline">y</span>, uma vez que o lado direito dos dois pontos &quot;:&quot; se refere à instância que está definindo o <span class="notranslate">struct</span>. Vale notar que isto significa que você <em>não pode</em> usar <span class="notranslate">struct</span> variáveis de membro para definir variáveis subseqüentes dentro da declaração <span class="notranslate">struct</span>. Por exemplo, o seguinte lhe daria um erro:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 10,<br />
        b : 10,<br />
        c : a + b<br />
    }</p>
  <p>O erro ocorre porque as variáveis <span class="inline">a</span> e <span class="inline">b</span> estão realmente sendo avaliadas no escopo do que está definindo o <span class="notranslate">struct</span> (elas estão no lado direito dos dois pontos &quot;:&quot;), e <em>não</em> são as que estão sendo definidas dentro do próprio <span class="notranslate">struct</span>.<strong></strong></p>
  <h3 style="padding-left: 20px"><em><strong style="margin-left: 0px">IMPORTANTE!</strong></em>  Você <strong>não pode </strong>usar nenhum <em><strong>global </strong></em>variáveis de escopo como <span class="notranslate">struct</span> nomes de membros, por exemplo: <span class="inline">game_id</span> ou <span class="inline">fps</span>. Você pode encontrar uma lista completa destas variáveis globais na página seguinte:</h3>
  <ul class="colour">
    <li><a href="Struct_Forbidden_Variables.htm">Estruturas Variáveis Proibidas</a></li>
  </ul>
  <p>Uma vez definido um <span class="notranslate">struct</span>, você pode acessar os dados nele contidos usando a notação &quot;ponto&quot;, assim:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    }<br />
    <br />
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>Você também pode realizar operações sobre as variáveis dentro de um <span class="notranslate">struct</span> ou usá-las em funções, assim como faria com qualquer outra variável. Por exemplo:</p>
  <p class="code">mystruct.a += 1;<br />
    mystruct.b = mystruct.a + 20;<br />
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>Finalmente, <span class="notranslate">structs</span> pode ter outros <span class="notranslate">structs</span> aninhados dentro deles, como este:</p>
  <p class="code">mystruct =<br />
    {<br />
        a :<br />
        {<br />
            aa : &quot;This is an example&quot;<br />
        },<br />
        b :<br />
        {<br />
            bb : &quot;And another one&quot;<br />
        },<br />
    };</p>
  <p>Para acessar tal aninhado <span class="notranslate">structs</span> você ainda usaria a notação de ponto, desta forma:</p>
  <p class="code">var _str = mystuct.a.aa + &quot; &quot; + mystruct.b.bb;<br />
    show_debug_message(_str);</p>
  <p>Outra maneira de acessar dados em um <span class="notranslate">struct</span> é usando o <a href="Language_Features/with.htm"><span class="inline">with()</span></a> função. Assim, por exemplo, você poderia fazer isto:</p>
  <p class="code">with(mystruct)<br />
    {<br />
        a += other.x;<br />
    }</p>
  <p>Usando <span class="inline">with()</span> muda o escopo do código para o dado <span class="notranslate">struct</span> onde você pode manipular as variáveis dos membros no escopo da estrutura. Note que no exemplo também utilizamos a <a href="Instance_Keywords.htm">palavra-chave<span class="inline">other</span> </a>. Isto funciona exatamente como em uma instância quando se usa <span class="inline">with()</span> e fará referência à instância (ou <span class="notranslate">struct</span>) que está realmente rodando o bloco de código.</p>
  <p>Quando um <span class="notranslate">struct</span> não é mais necessário, ele pode ser removido da memória usando o <a href="Language_Features/delete.htm"><span class="inline">delete</span></a> operador, que <span class="notranslate">flags</span> o <span class="notranslate">struct</span> como sendo capaz de ser coletado lixo. Isto não é estritamente necessário, pois o <a class="glossterm" data-glossterm="catador de lixo" href="#">lixeiro</a> pode fazer isto automaticamente se o <span class="notranslate">struct</span> não estiver mais referenciado em seu código, mas é uma boa prática fazê-lo e nós o recomendamos (por exemplo, ligue para <span class="inline">delete</span> no <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">evento de limpeza</a> de uma instância para dizer explicitamente ao lixeiro que um escopo de instância <span class="notranslate">struct</span> deve ser excluído). Aqui está um exemplo:</p>
  <p class="code">// Create event<br />
    mystruct =<br />
    {<br />
        pos_x : x,<br />
        pos_y : y,<br />
        count : 1000<br />
    };<br />
    <br />
    // Clean Up event<br />
    delete mystruct;
  </p>
  <h2 id="constr">Funções do Construtor</h2>
  <p>Você também pode usar <a href="Script_Functions.htm">funções</a> ou <a href="Method_Variables.htm">métodos de</a> <a href="Script_Functions.htm">script</a> para criar funções que podem ser usadas para gerar novas <span class="notranslate">structs</span>, o que requer o uso da palavra-chave <span class="inline">constructor</span> para a função e o <a href="Language_Features/new.htm"><span class="inline">new</span></a> ao criar um operador <span class="notranslate">struct</span> a partir de tal função. Veja a seguinte função:</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Ou, usando o método de sintaxe variável:</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Aqui estamos criando uma função chamada <span class="inline">Vector2</span> e dizendo ao <span data-keyref="GameMaker Name">GameMaker</span> que esta é uma função utilizada para criar estruturas, adicionando a palavra-chave <span class="inline">constructor</span> após sua definição. Você pode então chamar esta função construtora desta forma:</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>A variável <span class="inline">v2</span> conterá agora um <span class="notranslate">struct</span> com as variáveis <span class="inline">x</span> e <span class="inline">y</span> e o <a href="Functions/Static_Variables.htm"><span class="notranslate">static</span></a> <a href="Method_Variables.htm">variável de método</a> <span class="inline">Add</span>.</p>
  <p>Você também pode fazer uso de argumentos opcionais em suas funções de construtor:</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    }</p>
  <p>Este construtor usará agora <span class="inline">0</span> para os argumentos <span class="inline">_x</span> e <span class="inline">_y</span> se eles não forem especificados quando a função for chamada. Isto significa que você pode criar um novo <span class="inline">Vector2</span> <span class="notranslate">struct</span> sem ter que especificar nenhum argumento:</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>Inheritance</h2>
  <p>As funções criadas desta forma também suportarão <b>herança</b> única, ou seja: você pode criar uma função construtora que <span class="notranslate">inherits</span> dados de outra função construtora.</p>
  <p class="note"><strong>NOTA</strong>: Ao trabalhar com herança, não é possível utilizar variáveis de método para definir a função do construtor, apenas <span class="notranslate">script</span> funções.</p>
  <p>Por exemplo, criamos a função de construtor <span class="inline">Vector2</span> acima, para que possamos então usá-la como &quot;pai&quot; para outra função de construtor, que chamaremos de <span class="inline">Vector3</span>:</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br />
    {<br />
        z = _z;<br />
    <br />
        static Add = function( _vec3 )<br />
        {<br />
            x += _vec3.x;<br />
            y += _vec3.y;<br />
            z += _vec3.z;<br />
        }<br />
    }
  </p>
  <p>Como você pode ver, ao definir a função usamos um cólon &quot;<span class="inline">:</span>&quot; para separar o novo construtor da construtora mãe a ser herdada. O construtor criança (<span class="inline">Vector3</span>) passa os argumentos <span class="inline">_x</span> e <span class="inline">_y</span> para o construtor pai (<span class="inline">Vector2</span>), que são usados para executar o construtor pai primeiro, depois do qual o construtor da criança é executado. Desta forma, o construtor da criança obtém as variáveis do pai (<span class="inline">x</span> e <span class="inline">y</span>) e também pode definir as suas próprias (<span class="inline">z</span>).</p>
  <p>Você também pode passar valores constantes para a construtora pais, de modo que uma certa construtora infantil sempre forneça os mesmos valores para sua construtora pais:</p>
  <p class="code">function Item(damage) constructor<br />
    {<br />
        my_damage = damage;<br />
    }<br />
    <br />
    function BasicSword() : Item(10) constructor<br />
    {}<br />
    <br />
    var _basic_sword = new BasicSword();<br />
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>Isto significa que o dano de uma espada básica será sempre <span class="inline">10</span>, uma vez que ela passa esse valor para seu construtor-mãe independentemente de quais sejam seus próprios argumentos.</p>
  <p>Observe que atribuir um valor padrão a um argumento em uma construtora de crianças sobreporá o valor padrão dos pais para esse argumento. Veja o seguinte exemplo:</p>
  <p class="code">function Parent(value = 10) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    function Child(value = 20) : Parent(value) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Ambos os construtores irão imprimir <span class="inline">20</span> para o log de saída, pois esse foi o valor padrão para o argumento definido pelo construtor infantil, e o mesmo valor foi passado para o construtor pai.</p>
  <p>Para mais detalhes sobre os operadores <span class="inline">new</span> e <span class="inline">delete</span>, consulte as seguintes páginas:</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span> </li>
  </ul>
  <h2>Saída de cordas</h2>
  <p>Uma última coisa a mencionar sobre <span class="notranslate">structs</span> é que você pode mudar o que é produzido para o console deles para <span class="notranslate">debugging</span>. Por padrão, chamando a função <a href="../GML_Reference/Debugging/show_debug_overlay.htm"><span class="inline">show_debug_message()</span></a> em <span class="notranslate">struct</span> produzirá o conteúdo do <span class="notranslate">struct</span> (como mostrado acima). Entretanto, é possível personalizar esta mensagem adicionando um método especificamente nomeado ao <span class="notranslate">struct</span> chamado <span class="inline">toString</span>:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;,<br />
    <br />
        toString : function()<br />
        {<br />
            return &quot;This struct says &quot; + b + &quot;, &quot; + string(a) + &quot; times!&quot;;<br />
        }<br />
    }<br />
    show_debug_message(mystruct);
  </p>
  <p>Agora quando a função <span class="inline">show_debug_message()</span> for chamada, o método <span class="inline">toString</span> será usado para gerar a saída e - com o exemplo acima - você terá:</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>Note que você também pode chamar o <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a> em uma referência <span class="notranslate">struct</span> e usá-la para exibir o conteúdo - ou o método <span class="inline">toString</span> - na tela, ou salvá-lo em um arquivo, ou o que quer que seja, por exemplo:</p>
  <p class="code">var _str = string(mystruct);<br />
    draw_text(32, 32, _str);</p>
  <p>Finalmente, há uma série de funções de tempo de execução que você pode usar em <span class="notranslate">structs</span> para obter as variáveis que elas contêm, bem como algumas outras coisas. Você pode encontrá-las na seção seguinte:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funções variáveis</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="GML_Overview.htm">Visão geral da GML</a></div>
        <div style="float:right">A seguir: <a data-xref="{title}" href="Commenting_Code.htm">Código de Comentários</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->
</body>
</html>