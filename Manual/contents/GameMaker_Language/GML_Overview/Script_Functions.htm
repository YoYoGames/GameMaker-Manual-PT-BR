<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Funções e Variáveis de Roteiro</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Funções e Variáveis de Roteiro</h1>
  <p>Os ativos do Script são essencialmente uma coleção de uma ou mais funções ou variáveis definidas pelo usuário que você mesmo escreve como trechos de código no <a href="../../The_Asset_Editors/Scripts.htm">Editor de Script</a>. As funções definidas em um <span class="notranslate">script</span> podem resolver expressões, retornar valores ou fazer qualquer outra coisa que o <span class="notranslate">GameMaker Language</span> permita, assim como as <a href="Runtime_Functions.htm">funções</a> construídas em <a href="Runtime_Functions.htm">tempo de execução</a>.</p>
  <p>As funções Script devem geralmente ser usadas se você tiver um bloco de código que você usa em mais de um lugar ou <span class="notranslate">object</span>, ou quando você quiser que um bloco de código seja usado em vários <span class="notranslate">objects</span> de forma modular. Usar <span class="notranslate">scripts</span> para definir funções significa que você pode mudar a função apenas uma vez quando necessário e a mudança será &quot;pegada&quot; por cada <span class="notranslate">object</span> que tenha uma chamada para a função.</p>
  <p>Os scripts também podem ser muito úteis do ponto de vista organizacional, pois permitem criar grupos de funções que pertencem a uma determinada categoria - por exemplo, você pode ter várias funções todas relacionadas a colisões entre instâncias em seu jogo, então você criaria um &quot;<span class="inline">Collision_Functions</span>&quot; <span class="notranslate">script</span> e guardaria todas essas funções juntas nele.</p>
  <p>Veja também: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funções do Script vs. Métodos</a></p>
  <h2>Criação de funções</h2>
  <p>Ao criar um <span class="notranslate">script</span> com funções nele, as funções devem ser criadas utilizando os seguintes formatos:</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>ou:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Para criar uma função em <span class="notranslate">GML</span> Visual, use <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>. Habilite sua opção &quot;Temp&quot; para criar uma variável de método (segunda sintaxe mostrada acima).</p>
  <p>Em geral, no entanto, você usaria o <em>primeiro </em>formulário para as funções <span class="notranslate">script</span>, pois ele definirá a função como sendo especificamente uma função <span class="notranslate">script</span>, o que significa que ela será <strong>global </strong>no <a href="Variables_And_Variable_Scope.htm">escopo</a>, receberá um <strong>índice de script</strong>, e não exigirá o prefixo <span class="inline">global</span> para identificá-la, pois o compilador a reconhecerá como uma função <span class="notranslate">script</span>.</p>
  <p>O uso do segundo formulário gerará uma <a href="Method_Variables.htm">variável do método de</a> escopo global, e como tal <em>não </em>será reconhecido como uma função <span class="notranslate">script</span> pelo <span class="notranslate">IDE</span> e exigirá o uso do prefixo <span class="inline">global</span> ao ser referenciado em seu código.</p>
  <p class="note"><span class="note">OBSERVAÇÃO</span> Você pode verificar isso usando os dois formulários em <span class="notranslate">script</span> e depois chamando a função runtime <a href="../GML_Reference/Variable_Functions/typeof.htm">tipoof()</a> em cada um deles. Um será classificado como um &quot;número&quot; - já que retorna um ID de índice <span class="notranslate">script</span> - e o outro será classificado como um &quot;método&quot;.</p>
  <h2>Parâmetros/Argumentos</h2>
  <p>Você pode definir seus próprios parâmetros/argumentos para uma função, que estarão disponíveis para a função como variáveis locais e podem ser usados para qualquer finalidade dentro dessa função:</p>
  <p class="code">function move(<strong>spd, dir</strong>)<br />
    {<br />
        speed = <strong>spd</strong>;<br />
        direction = <strong>dir</strong>;<br />
    }</p>
  <p>Esta função pega dois argumentos e aplica seus valores às variáveis <span class="inline">speed</span> e <span class="inline">direction</span> da instância. Agora ela pode ser chamada como qualquer função <span class="notranslate">runtime</span> e os argumentos podem ser passados para ela:</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br />
    <br />
    <strong>move(4, _mouse_dir);</strong>
  </p>
  <h2>Argumentos opcionais</h2>
  <p>Se um argumento não for dado a uma função, seu valor será <span class="inline">undefined</span>. Você pode usar isto para definir argumentos <em>opcionais</em>, e verificar se um argumento é ou não aprovado, verificando se é igual a <span class="inline">undefined</span>. Entretanto, você também pode definir explicitamente um valor padrão para um argumento que será usado em vez de <span class="inline">undefined</span> quando não for aprovado.</p>
  <p>Você pode atribuir esse valor padrão a um parâmetro usando o sinal de igual (<span class="inline">=</span>), tornando-o uma variável opcional:</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br />
    {<br />
        speed = spd;<br />
        direction = dir;<br />
    }</p>
  <p>Se o argumento <span class="inline">dir</span> não for passado ao chamar a função acima, então seu valor padrão será <span class="inline">90</span>, movendo a instância na direção ascendente.</p>
  <p class="note"><span class="tip">DICA</span> Você pode omitir argumentos de chamadas de função e eles serão enviados por padrão para <span class="inline">undefined</span> (ou o valor padrão para esse argumento como definido pela função).<br>
    <br>
    Por exemplo, escrever <span class="inline">my_func(0,,,1)</span> é o mesmo que escrever <span class="inline">my_func(0, undefined, undefined, 1)</span>.
  </p>
  <hr />
  <p>O valor padrão de uma variável opcional pode ser uma expressão, assim, por exemplo, você pode usar variáveis e funções de chamada enquanto define uma variável opcional. Note que tal expressão só será executada se seu argumento opcional não for fornecido na chamada de função. Veja o seguinte exemplo de uma função de registro:</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br />
    {<br />
        var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br />
        _string += object_get_name(object) + &quot;: &quot;;<br />
        _string += text;<br />
        <br />
        show_debug_message(_string);<br />
    }</p>
  <p>Esta função leva três argumentos, onde o primeiro argumento tem como padrão uma constante <span class="notranslate">string</span>, o segundo argumento tem como padrão uma variável de instância (no escopo da instância de chamada) e o terceiro argumento tem como padrão uma expressão que chama uma função para recuperar a data e a hora atual. Esta função pode agora ser chamada com até três argumentos, como visto no exemplo a seguir:</p>
  <p class="code">log();<br />
    // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br />
    <br />
    log(&quot;Player Shot&quot;, obj_player, 10);<br />
    // Prints: [10] obj_player: Player Shot
  </p>
  <h2>JSDoc</h2>
  <p>Também recomendamos que você acrescente comentários para definir as propriedades da função (veja a seção sobre <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">Comentários JSDoc</a> para mais detalhes), de modo que um simples <span class="notranslate">script</span> se pareceria com isto:</p>
  <p class="code">/// @function                 log(message);<br />
    /// @param {string}  message  The message to show<br />
    /// @description              Show a message whenever the function is called.<br />
    <br />
    function log(message)<br />
    {<br />
        show_debug_message(message);<br />
    }
  </p>
  <p>Funções adicionais para o <span class="notranslate">script</span> podem ser adicionadas usando o mesmo formato como mostrado acima, uma após a outra dentro do <span class="notranslate">script</span> <span class="notranslate">asset</span>.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>Valor de retorno</h2>
  <p>As funções em <span class="notranslate">scripts</span> também podem devolver um valor, assim como as funções <span class="notranslate">runtime</span> podem, e como tal podem ser usadas em expressões. Para isso, você usaria a função <a href="Language_Features/return.htm"><span class="inline">return</span></a> declaração:</p>
  <p class="code">return &lt;expression&gt;</p>
  <p>Deve-se notar que o <strong><i>a execução da função termina na declaração de retorno</i></strong>O que significa que qualquer código que venha após o <strong>retorno </strong>tenha sido chamado <i>não será executado</i>. Aqui está um pequeno exemplo de função de uma função chamada &quot;<span class="inline">sqr_calc</span>&quot; que calcula o quadrado de qualquer valor que lhe é passado, e caso o valor dado não seja um número real, ele usa <strong>o retorno</strong> para terminar a função cedo, de modo que o cálculo real nunca é executado:</p>
  <p class="code">/// @function           sqr_calc(val);<br />
    /// @param {real}  val  The value to calculate the square of<br />
    /// @description        Calculate the square of the given value<br />
    <br />
    function sqr_calc(val)<br />
    {<br />
        if (!is_real(val))<br />
        {<br />
            return 0;<br />
        }<br />
    <br />
        return (val * val);<br />
    }
  </p>
  <p>Observe que se você criar uma função <span class="notranslate">script</span> <em>sem</em> valor de retorno, então em sua verificação de código para uma, você receberá o valor <span class="inline">undefined</span> por padrão.</p>
  <p>Para chamar uma função <span class="notranslate">script</span> de dentro de um código, basta utilizá-la da mesma forma que ao chamar qualquer função <span class="notranslate">runtime</span> - ou seja, escrever o nome da função com os valores dos parâmetros entre parênteses. Assim, o <span class="notranslate">script</span> acima seria chamado desta forma:</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br />
    {<br />
        val = scr_sqr(amount);<br />
    }</p>
  <p class="note"><strong>NOTA</strong>: Ao utilizar suas próprias funções de <span class="notranslate">scripts</span> no editor de código, você pode pressionar<span> <img></span> ou clique no botão do meio do mouse <span><img> </span>sobre o nome da função para abrir o <span class="notranslate">script</span> que o contém para edição direta.</p>
  <h2>Nomes de Script vs. Nomes de Funções</h2>
  <p>É importante entender que <i>os nomes</i> <span class="notranslate">script</span> são <b>independentes das funções que eles contêm</b>, assim você pode nomear seu <span class="notranslate">scripts</span> de uma forma mais &quot;senso comum&quot;, ou seja: todas as suas funções de IA poderiam ir em <span class="notranslate">script</span> &quot;<span class="inline">Enemy_AI</span>&quot; (seguindo a convenção padrão <span class="notranslate">asset</span> de nomenclatura de caracteres alfanuméricos e a barra inferior &quot;_&quot; apenas). Entretanto, você ainda pode chamar <span class="notranslate">scripts</span> em seu jogo - e você pode nomear <span class="notranslate">scripts</span> como uma função que você define neles - o que pode dar origem a um problema devido à forma como o <span data-keyref="GameMaker Name">GameMaker</span> armazena as referências <span class="notranslate">asset</span>. Para dar um exemplo, considere este código, chamado a partir de uma instância:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>O código acima está tentando chamar um <span class="notranslate">script</span> chamado &quot;myscript&quot; dentro de um método, que neste caso falhará. Isto porque a função em linha está realmente usando o <em>índice</em> para o <span class="notranslate">script</span> <span class="notranslate">asset</span> e <strong>não </strong>chamando a função <span class="notranslate">script</span> - por exemplo: se o índice <span class="notranslate">script</span> resolve para &quot;4&quot;, essencialmente a função está chamando <span class="inline">4(arg);</span>, o que não faz sentido. O código deve ser estruturado de uma das duas maneiras a seguir:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(method(undefined, myscript), arg);<br />
    <br />
    // 2<br />
    function indirectCall(func, arg)<br />
    {<br />
        script_execute(func, arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Isto é importante notar, especialmente quando se trabalha com projetos legados onde <span class="notranslate">scripts</span> contém uma única função, e a função é nomeada da mesma forma que <span class="notranslate">script</span>. No entanto, você <em>nunca</em> deve fazer isto, e seu <span class="notranslate">scripts</span> deve ser nomeado independentemente das funções que eles contêm.</p>
  <div data-conref="../../assets/snippets/Script_empty_reference_error.hts"> </div>
  <h2>Escopo do Script</h2>
  <p>Isto nos leva à última e mais importante coisa a saber sobre <span class="notranslate">scripts</span> e as funções que eles contêm: <span class="notranslate">scripts</span> são analisados em nível <b>global</b> e serão <strong>compilados logo no início do jogo</strong>. Isto significa que <em>tecnicamente</em> todas as funções em um <span class="notranslate">script</span> são <a href="Method_Variables.htm">variáveis do método</a>&quot;unbound&quot;, e quaisquer variáveis declaradas fora de uma função no <span class="notranslate">script</span> serão consideradas <a href="Variables/Global_Variables.htm">variáveis globais</a>. Por exemplo, considere este script:</p>
  <p class="code">function Foo()<br />
    {<br />
        // Do something<br />
    }<br />
    blah = 10;<br />
    function Bar()<br />
    {<br />
        // Do something else<br />
    }</p>
  <p>No caso acima, não apenas definimos as funções <span class="inline">Foo</span> e <span class="inline">Bar</span>, mas também a variável <span class="inline">blah</span> e todas elas são consideradas como tendo sido criadas no âmbito <b>global</b>. As funções não precisam da palavra-chave <span class="inline">global</span> para serem reconhecidas, pois o compilador entende que estas funções fazem parte do <span class="notranslate">script</span>, mas se você quisesse acessar <span class="inline">blah</span>, então precisaria fazê-lo:</p>
  <p class="code">val = global.blah;</p>
  <p>Dito isto, recomendamos que você <b>sempre digite explicitamente variáveis globais</b> ao criá-las em <span class="notranslate">scripts</span> para evitar qualquer problema posteriormente. <span class="notranslate">Scripts</span> também são um lugar ideal para definir qualquer <strong>Macros</strong> ou <strong>Enums</strong><a href="Variables/Constants.htm">(constantes</a>), pois adicioná-los a um <span class="notranslate">script</span> fora de uma função também significa que eles serão criados para uso antes que o código do jogo comece a ser executado de fato. Abaixo está um exemplo de um <span class="notranslate">script</span> que está criando diferentes valores de escopo global para um jogo:</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br />
    global.player_score = 0;<br />
    global.player_hp = 100;<br />
    global.pause = false;<br />
    global.music = true;<br />
    global.sound = true;<br />
    <br />
    enum rainbowcolors<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }<br />
    <br />
    #macro weapon_num 3<br />
    #macro weapon_gun 0<br />
    #macro weapon_bomb 1<br />
    #macro weapon_knife 2
  </p>
  <p>Observe como todas essas constantes são configuradas fora de qualquer chamada de função, o que significa que serão inicializadas antes de tudo o resto e em um escopo <em>global </em>. Isto significa que se você quiser usar um script para inicializar variáveis em um escopo de <em>instância </em>, então você deve embrulhá-las em uma função, por exemplo:</p>
  <p class="code">/// @function                init_enemy();<br />
    /// @description             Initialise enemy instance vars<br />
    <br />
    function init_enemy()<br />
    {<br />
        hp = 100;<br />
        dmg = 5;<br />
        mana = 50;<br />
    }
  </p>
  <p>Assim, <span class="notranslate">scripts</span> pode ser usado para gerar macros, enums e variáveis globais antes do início do jogo, para que estejam prontos para uso a qualquer momento, e também podem ser usados para criar métodos &quot;não vinculados&quot; (funções definidas pelo usuário) que podem ser usados em seu jogo como funções <span class="notranslate">GML</span> <span class="notranslate">runtime</span>.</p>
  <p>Uma última observação sobre as funções <span class="notranslate">script</span> é que se você estiver desenvolvendo para <strong>Web </strong>(ou seja: visando <strong>HTML5</strong>), então há um protocolo de função adicional que você pode usar ao adicionar funções a <span class="notranslate">scripts</span>, que é para prefixar um nome de função com <span class="inline">gmcallback_</span>, por exemplo:</p>
  <p class="code">gmcallback_create_button</p>
  <p>Usar o nome da função acima significaria que a função <span class="inline">gmcallback_create_button()</span> não será ofuscada e, portanto, pode ser usada no JavaScript <span class="notranslate">extensions</span> e outras áreas de seu jogo, por exemplo, ao usar o <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><span class="inline">clickable_*</span></a> funções.</p>
  <h2>Variáveis estáticas</h2>
  <p>As funções também podem fazer uso de variáveis estáticas, que mantêm seus valores ao longo de cada chamada de função. Favor <a href="Functions/Static_Variables.htm">ler esta página</a> para mais informações.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="GML_Overview.htm">Visão geral da GML</a></div>
        <div style="float:right">A seguir: <a href="Method_Variables.htm">Método Variáveis</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>