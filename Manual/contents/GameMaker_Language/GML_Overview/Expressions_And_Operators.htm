<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Expressões e Operadores</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different GML expressions" />
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~" />
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Expressões e Operadores</h1>
  <h2>Expressões</h2>
  <p>Uma expressão é uma frase matemática que pode conter números comuns, variáveis, <span class="notranslate">strings</span>, ou funções, assim como um ou mais <strong>operadores </strong>(como adicionar, subtrair, multiplicar, etc...). Os valores usados em uma expressão podem ser números reais (por exemplo, <span class="inline">3.4 * 6</span>), números hexadecimais começando com um sinal <span class="inline">$</span> (por exemplo, <span class="inline">$00FFAA | $88FFAA</span>), <span class="notranslate">strings</span> entre aspas duplas (por exemplo, <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span>) ou expressões mais complicadas usando múltiplos operadores e valores.</p>
  <h2>Operadores</h2>
  <p>Os seguintes operadores são fornecidos para uso com expressões:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Atribuição (=)</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span class="inline2"><b>=</b></span> é usado para atribuir um valor a uma variável. Note que isto <i>também</i> pode ser usado para comparar variáveis no <span data-keyref="GameMaker Name">GameMaker</span> e você pode ver isto em exemplos e códigos de outras pessoas. Entretanto, este é um legado de antigas versões do <i>GameMaker</i> e você deve usar os operadores <b>==</b> para comparar e <b>=</b> para atribuir, como mostrado nestes exemplos:</p>
    <p class="code">a = 12;<br />
      speed = 5;<br />
      val = (old_val + 5);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Combinando (&amp;&amp;, |||, ^^)</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b><span class="inline2">&amp;&amp;</span>, |||, ^^ (<span class="inline2">e</span>, <span class="inline2">ou</span> e <span class="inline2">xor</span></b> ) são usados para combinar valores booleanos para dar ou verdadeiro ou falso. Se algum dos exemplos a seguir for resolvido para <span class="inline">true</span>, o código será executado:</p>
    <p class="code">if (a == b &amp;&amp; c == d) { do something... }  // and<br />
      if (a == b || c == d) { do something... }   // or<br />
      if (a == b ^^ c == d) { do something... }  // xor</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Nullish (??, ??=)</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="note"><span class="note">NOTA</span> &quot;Nullish&quot; refere-se simplesmente a um valor que é igual a <span class="inline2">indefinido</span> ou <span class="inline2">ponteiro_nulo</span>.</p>
    <p class="dropspot"><span class="inline2">??</span> é um operador de coalescência nula que retorna uma expressão específica se o valor dado for <span class="inline2">indefinido</span> ou <span class="inline2">ponteiro_nulo</span>. Este operador espera a seguinte sintaxe:</p>
    <p class="code_plain">(entrada ?? nulo_saída)</p>
    <p class="dropspot">Se <span class="inline2">a entrada</span> for <span class="inline2">indefinida</span> ou <span class="inline2">ponteiro_nulo</span>, a expressão retornará o valor <span class="inline2">null_output</span>; entretanto, em todos os outros casos, ela simplesmente retornará o valor de <span class="inline2">entrada</span>. Isto pode ser usado para definir um valor &quot;padrão&quot; para uma variável no caso da própria variável não possuir um valor válido.</p>
    <p class="dropspot">Considere o seguinte exemplo:</p>
    <p class="code_plain">username = data.username ?? &quot;INVALID USERNAME&quot;;</p>
    <p class="dropspot">Aqui, a variável <span class="inline2">nome de usuário</span> obterá o valor armazenado em <span class="inline2">data.username</span>, entretanto, se <span class="inline2">data.username</span> for <span class="inline2">indefinido</span> ou <span class="inline2">pointer_null</span>, a variável obterá o <span class="notranslate">string</span> <span class="inline2">&quot;INVALID USERNAME</span> &quot; em seu lugar. Este exemplo garante que qualquer chamada de função usando a variável <span class="inline2">nome de usuário</span> não cause um erro por ter sido dado um valor nulo, e que o usuário saiba quando seu nome de usuário não foi retornado.</p>
    <p class="note"><span class="note">NOTA</span> A expressão no lado direito do operador de coalescência em inglês é executada somente quando o valor de entrada é nulo, significando que qualquer chamada de função incluída na expressão RHS somente será executada se o valor de entrada for nulo.</p>
    <hr />
    <p class="dropspot"><span class="inline2">??=</span> é semelhante ao operador de coalescência nulista descrito acima, mas é usado especificamente para atribuições variáveis. Este operador espera a seguinte sintaxe:</p>
    <p class="code">variable ??= null_value</p>
    <p class="dropspot">Se <span class="inline2">a variável</span> for <span class="inline2">indefinida</span> ou <span class="inline2">ponteiro_nulo</span>, o valor <span class="inline2">nulo_valor</span> será atribuído a ela; caso contrário, a variável permanecerá inalterada. Isto pode ser usado para atribuir um valor &quot;padrão&quot; personalizado a uma variável quando ela possui um valor nulo.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Comparando (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!=</span>, <span class="inline2">&gt;</span>, <span class="inline2">&gt;=</span></b> são comparações e só podem dar um resultado <span class="inline">true</span> ou <span class="inline">false</span> (onde verdadeiro também pode ser interpretado como 1, e falso como 0). Exemplos de uso:</p>
    <p class="code">if (a &lt; b) {do something...}<br />
      if (a != b) {do something...}</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, ^, <span class="inline2">&lt;&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span> </b>são usados para realizar operações bitwise, onde | = bitwise ou, &amp; = bitwise e, ^ = bitwise xor, &lt;&lt;&lt; = shift left, &gt;&gt; = shift right. Exemplos de uso:</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br />
      if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">Você pode encontrar informações adicionais sobre como usar os operadores bitwise e o que eles fazem na seção: <a href="../../Additional_Information/Bitwise_Operators.htm">Operadores Bitwise</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Aritmética (+, -, *, /)</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b> são somar, subtrair, multiplicar e dividir, respectivamente. Exemplos de uso:</p>
    <p class="code">c = a * b;<br />
      str = a + &quot;world&quot;;</p>
    <p class="note"><span class="note"><b>NOTA</b></span> Os números de pontos flutuantes não param em Divide by Zero, pois eles terão um infinito como resposta. Se A e B forem inteiros (int32 ou int64), então a divisão será feita como inteiros (e a divisão por 0 será verificada e o erro será cometido. Caso contrário, será feita como uma divisão em ponto flutuante (sem divisão por 0).</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Incremento/Decremento (++, --)</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span> são usados para adicionar ou subtrair um<span class="inline2">(1</span>) de um valor. Vale notar que colocar isto antes ou depois do valor a ser adicionado ou subtraído terá resultados ligeiramente diferentes. Por exemplo, o valor a ser adicionado ou subtraído:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++a</span> irá incrementar a variável e retornar o valor incremental.</li>
      <li class="dropspot"><span class="inline">a++</span> incrementará a variável, mas retornará o valor antes de ser incrementado.</li>
    </ul>
    <p class="dropspot">Portanto, se você tem algo como isto:</p>
    <p class="code">var a = 1;<br />
      show_debug_message(string(a++));<br />
      show_debug_message(string(++a));</p>
    <p class="dropspot">A saída de depuração seria 1 e 3. Aqui estão alguns exemplos de uso:</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br />
      {<br />
          do something...<br />
      }</p>
    <p class="code">if (hit == true)<br />
      {<br />
          --score;<br />
      }</p>
    <p class="note"><strong>OBSERVAÇÃO</strong>: No <span class="notranslate">YoYo</span> Plataformas alvo do compilador (aquelas marcadas (YYC)), estas expressões são avaliadas da esquerda para a direita, enquanto em todas as outras plataformas alvo são avaliadas da direita para a esquerda, o que significa que isto:</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">dará resultados diferentes, dependendo da plataforma.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Divisão e Modulo (div, %, mod)</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong><span class="inline2">div</span>, <span class="inline2">mod</span> (<span class="inline2">%</span></strong> ) são divisão e modulo, onde div lhe dá o valor que um valor pode ser dividido em produzir apenas um quociente inteiro, enquanto mod lhe dá apenas o restante de uma divisão. Note que você só pode div ou mod usando valores inteiros. Exemplos de uso: </p>
    <p class="code">secs = time mod 60;<br />
      secs = time % 60;    // Identical to the above line<br />
      time_str = string(time div 60);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Unário (!, -, ~)</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">São fornecidos os seguintes operadores <strong>unários</strong>:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline2"><strong>!</strong></span>: booleano &quot;não&quot;, então <span class="inline">!true == false</span></li>
      <li class="dropspot"><span class="inline2"><strong>-</strong></span>: nega o próximo valor real ou inteiro (não válido para <span class="notranslate">strings</span> ou booleans)</li>
      <li class="dropspot"><span class="inline2"><strong>~</strong></span>nega o próximo valor bitwise</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <h2>Agrupamento de Expressão</h2>
  <p><i></i>Como valores em todas as expressões você pode usar números, variáveis ou funções que retornam um valor, e subexpressões podem ser colocadas entre parênteses também. Todos os operadores trabalham para valores de números reais, mas <em>as comparações </em>também funcionam para <span class="notranslate">strings</span> e o operador &quot;<strong>+</strong>&quot; pode ser usado para concatenar cadeias de caracteres.</p>
  <p>Ao fazer múltiplas operações em uma única expressão, é <b>muito importante</b> que você use parênteses <span class="inline">()</span> para separar a ordem de operação, já que plataformas diferentes podem executá-las de forma diferente se não for explicitamente declarado desta forma. Por exemplo, considere o seguinte código:</p>
  <p class="code">a = b == c || d;</p>
  <p>Os diferentes compiladores alvo realizarão as operações em diferentes ordens, uma vez que não são mostrados explicitamente, dando origem a resultados &quot;estranhos&quot; que você pode não esperar quando jogar seu jogo. para evitar isso, use o <span class="inline">()</span> para separar as peças, desta forma:</p>
  <p class="code">a = (b == c || d);   //better<br />
    a = ((b == c) || d); //best</p>
  <h2>Declaração Agrupamento</h2>
  <p>Ao utilizar várias operações e expressões em um único bloco de código, estas também devem ser separadas. Por exemplo, o seguinte <em>parece</em> ser um código válido:</p>
  <p class="code">if my_var == your_var ++their_var;</p>
  <p>No entanto, o compilador poderia interpretar isto de uma de duas maneiras:</p>
  <p class="code">if my_var == your_var<strong>++</strong> then their_var;<br />
    <br />
    // or<br />
    <br />
    if my_var == your_var then <strong>++</strong>their_var;
  </p>
  <p>Agora, você pode dizer, olhando para o código, que um deles é um pouco estúpido, mas isso é porque sabemos o que queremos alcançar e o que queremos que aconteça, mas o compilador não sabe. Tudo o que ele vê são duas variáveis com o operador ++ entre elas, então ele tem que escolher em qual delas aplicá-lo. Portanto, você deve <strong>sempre explicitamente colocar expressões, operações e declarações entre parênteses</strong>. A versão correta do código acima deve ser:</p>
  <p class="code">if (my_var == your_var)<br />
    {<br />
        ++their_var;<br />
    }</p>
  <p>Isto pode parecer mais verboso, mas não há ambigüidade sobre as operações que estão sendo realizadas e ele compilará e se comportará de forma consistente em todas as plataformas. Observe também que embora você possa encadear expressões e declarações sem o uso de colchetes no momento, esta é uma característica herdada e o avanço pode ser depreciado e removido de <span class="notranslate">GML</span>, portanto, o uso de colchetes adequadamente agora irá &quot;proteger&quot; seu código (e é geralmente uma boa prática de qualquer forma).</p>
  <p>Aqui estão alguns exemplos finais das várias expressões diferentes:</p>
  <p class="code">{<br />
        x = 23 div 2;<br />
        colour = $FFAA00 + $00BB12;<br />
        str = &quot;hello&quot; + &quot;world&quot;;<br />
        y += 5;<br />
        x *= y;<br />
        x = y &lt;&lt; 2;<br />
        x = 23 * ((2 + 4) / sin(y));<br />
        b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br />
    }</p>
  <p>Uma última coisa a ser notada é que há também alguma expressão &quot;atalhos&quot; chamados <b>acessores</b> para uso com certas <a href="../GML_Reference/Data_Structures/Data_Structures.htm">Estruturas de Dados</a> e <a href="Arrays.htm">Arrays</a>. Estes permitem adicionar ou substituir dados dentro destes formatos de forma rápida e fácil e sem o uso de qualquer chamada de função. Para obter detalhes completos, consulte a seguinte página</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Accessors.htm">Accessors</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="GML_Overview.htm">Visão geral da GML</a></div>
        <div style="float:right">A seguir: <a data-xref="{title}" href="Script_Functions.htm">Funções e Variáveis do Roteiro</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>