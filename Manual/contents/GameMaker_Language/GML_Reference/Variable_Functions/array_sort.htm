<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>array_sort</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function array_sort" />
  <meta name="rh-index-keywords" content="array_sort" />
  <meta name="search-keywords" content="array_sort" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span>array_sort</span></h1>
  <p>Com esta função você pode ordenar uma matriz em ordem ascendente ou descendente ou usando uma função personalizada para definir a ordem de ordenação. A função exige que você forneça a matriz para ordenar e, em seguida, uma das seguintes opções:</p>
  <ul class="colour">
    <li>As constantes <span class="inline">true</span> ou <span class="inline">false</span> para indicar uma <span>ordem ascendente (<span class="inline">true</span>) ou descendente (<span class="inline">false</span>) ordenam</span></li>
    <li>Uma função personalizada para definir a ordem de classificação</li>
  </ul>
  <p>Esta função modificará o conteúdo da matriz original que foi fornecida. Para criar uma cópia ordenada, use <span class="inline"><a href="array_copy.htm">array_copy()</a></span> para duplicar a matriz primeiro, e depois passe isso para esta função.</p>
  <h3>Usando uma função personalizada</h3>
  <p>Se você usar uma função personalizada para a ordenação, ela deve levar 2 argumentos que receberão os valores do elemento atual e do elemento seguinte, respectivamente. A função deve retornar qualquer um dos seguintes valores para afetar a ordem de ordenação (onde <span class="inline">elm1</span> é o elemento atual e <span class="inline">elm2</span> é o próximo elemento):</p>
  <ul class="colour">
    <li><span class="inline">0</span>: se <span class="inline">elm1</span> e <span class="inline">elm2</span> forem iguais</li>
    <li><span class="inline">&lt;= -1</span> (número inteiro negativo): se <span class="inline">elm1</span> for antes <span class="inline">elm2</span></li>
    <li><span class="inline">&gt;= 1</span> (número inteiro positivo): se <span class="inline">elm1</span> for atrás <span class="inline">elm2</span></li>
  </ul>
  <p class="note"><span class="note">NOTA</span> O valor retornado por sua função personalizada deve ser um número inteiro. Valores de ponto flutuante inferiores a 1 serão lidos como 0, portanto você deve usar <a href="../Maths_And_Numbers/Number_Functions/sign.htm"><span class="inline">sign()</span></a> ou <a href="../Maths_And_Numbers/Number_Functions/round.htm"><span class="inline">round()</span></a> se sua função trabalha com valores de ponto flutuante.</p>
  <p>Se a matriz contém um conjunto de <span class="notranslate">strings</span>, então o <span class="notranslate">strings</span> será ordenado alfabeticamente com base no alfabeto inglês ao usar o tipo padrão de ordenação ascendente/descendente. Todos os outros tipos de dados serão ordenados com base em seu valor numérico, cujos valores exatos dependerão do próprio tipo de dados (por exemplo, um array de <span class="notranslate">buffers</span> seria ordenado com base no valor numérico de seus endereços de memória).</p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">array_sort(variable, sorttype_or_function);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td><span class="notranslate">variable</span></td>
        <td><span data-keyref="Type_Array"><a href="../../../../GameMaker_Language/GML_Overview/Arrays.htm" target="_blank">Array</a></span></td>
        <td><span class="notranslate">The variable that holds the array.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span>sorttype_or_function<span> </span></td>
        <td><span data-keyref="Type_Bool"><a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Booleano</a></span> ou <span data-keyref="Type_Function_Script"><a href="../../../../GameMaker_Language/GML_Overview/Script_Functions.htm" target="_blank">Função do Script</a></span>/<span data-keyref="Type_Method"><a href="../../../../GameMaker_Language/GML_Overview/Method_Variables.htm" target="_blank">Método</a></span></td>
        <td><span class="notranslate">The sort type (<span><span class="inline">true</span> para ascendente ou <span class="inline">false</span> para descendente) ou uma referência de função a ser usada para a classificação.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">var _a = [10, 9, 8, 7, 6, 5];<br />
    <br />
    array_sort(_a, function(elm1, elm2)<br />
    {<br />
        return elm1 - elm2;<br />
    });
  </p>
  <p>O código acima usa uma função de classificação personalizada para classificar a matriz em uma ordem ascendente. A função de ordenação pega os dois elementos da matriz como <span class="inline">elm1</span> e <span class="inline">elm2</span> e realiza uma subtração sobre eles. Se <span class="inline">elm1</span> for maior que <span class="inline">elm2</span>, a subtração resulta em um número positivo que empurra <span class="inline">elm1</span> para depois de <span class="inline">elm2</span>, colocando-os, portanto, em ordem ascendente.</p>
  <p>Aqui está um exemplo estendido:</p>
  <p class="code">var _xx, _yy, _a;<br />
    <br />
    for (var i = 0; i &lt; 10; i++)<br />
    {<br />
        _xx = irandom(room_width);<br />
        _yy = irandom(room_height);<br />
        _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet);<br />
    }<br />
    <br />
    show_debug_message(_a);<br />
    <br />
    var _f = function(inst1, inst2)<br />
    {<br />
        return inst1.x - inst2.x;<br />
    }<br />
    <br />
    array_sort(_a, _f);<br />
    show_debug_message(_a);
  </p>
  <p>O código acima criará um conjunto de 10 instâncias colocadas em posições aleatórias dentro do <span class="notranslate">room</span>. A mensagem de debug mostrará algo como o seguinte:</p>
  <p class="code">[ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]</p>
  <p>O código então cria um método a ser usado na função <span class="inline">array_sort()</span> que retorna a diferença entre cada uma das X posições das instâncias no <span class="notranslate">room</span>. Em seguida, a função <span class="inline">array_sort()</span> é executada usando esse método, ordenando as instâncias por X do mais baixo para o mais alto. A saída para a matriz seria então algo parecido com isto:</p>
  <p class="code">[ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="Variable_Functions.htm">Funções variáveis</a></div>
        <div style="float:right">A seguir: <a href="array_length.htm"><span class="notranslate">array_length</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
array_sort
-->
  <!-- TAGS
array_sort
-->
</body>
</html>