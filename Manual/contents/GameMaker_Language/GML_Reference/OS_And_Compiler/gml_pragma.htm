<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gml_pragma</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for gml_pragma" />
  <meta name="rh-index-keywords" content="gml_pragma" />
  <meta name="search-keywords" content="gml_pragma" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gml_pragma</h1>
  <p>A função <span class="inline">gml_pragma</span> afeta a forma como o alvo dado compila seu código e deve ser chamado com os diferentes comandos para otimizar ainda mais a compilação final do seu projeto. Estes comandos são efetivamente <i>pré-processados</i> antes que o jogo seja compilado e, portanto, a função pode ser colocada em qualquer lugar em seu projeto e ainda será processada antes que o jogo seja totalmente compilado. Os comandos disponíveis são os seguintes:</p>
  <ul class="colour">
    <li>&quot;<b>forceinline</b>&quot; - Quando a função é chamada com o pragma &quot;forceinline&quot; em uma <b>função de script</b>, o YYC compilará o projeto com a função inline, em vez de referenciada. Isto dará um impulso adicional ao processamento, mas deve-se ter cuidado ao usá-la, pois também inflará o tamanho final do arquivo executável, especialmente se o código in-lined for grande e/ou usado em vários lugares diferentes, bem como aumentará muito o tempo de compilação. Note que este pragma <b>só</b> é <b>válido quando se constrói usando o YYC</b>.</li>
    <li>&quot;<b>global</b>&quot;, &quot;<b>[código gml]</b>&quot; - O pragma &quot;global&quot; permite chamar algum <span class="notranslate">GML</span> código formatado como <span class="notranslate">string</span>, em um escopo <b>global</b>, em tempo de compilação, antes que o primeiro <span class="notranslate">room</span> do jogo seja executado. Por exemplo:
     <p class="code">gml_pragma(&quot;global&quot;, &quot;Init()&quot;);</p>
      Isto chamará a função <span class="notranslate">script</span> de &quot;Init&quot; antes que o primeiro <span class="notranslate">room</span> do jogo seja executado. Note que o <span class="notranslate">GML</span> fornecido como segundo argumento <b>deve ser uma constante de tempo de compilação</b>, e também note que você não pode usar este pragma para criar instâncias ou realizar qualquer operação que requeira um <span class="notranslate">room</span> (ou qualquer coisa em um <span class="notranslate">room</span>) para funcionar.
    </li>
    <li>&quot;<b>PNGCrush</b>&quot; - O pragma &quot;PNGCrush&quot; utilizará o programa <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">PNGCrush</a> em cada <span class="notranslate">texture</span> criado. Note que isto pode acrescentar significativamente ao tempo que leva para compilar o jogo, de modo que você não o quer ligado o tempo todo, embora possa fazer economias significativas no tamanho final do arquivo. Esta opção só se aplica a <span class="notranslate">Texture</span> Grupos que utilizam o formato PNG (veja <a data-xref="{text}" href="../../../Settings/Texture_Groups.htm#h">Configurações de Grupo</a>).</li>
    <li>&quot;<b>Texgroup.Scale</b>&quot;, &quot;<b>[TextureGroupName]</b>&quot;, &quot;<b>[Scale Divisor]</b>&quot; - A &quot;Texgroup.Scale&quot; escalará o dado grupo <span class="notranslate">texture</span> em compilação. Você precisa dar dois argumentos adicionais aqui: o &quot;[TexGroupName]&quot;, que é o nome (a <span class="notranslate">string</span>) do grupo <span class="notranslate">texture</span> à escala, e o &quot;[Scale Divisor]&quot; (também um <span class="notranslate">string</span>), que é o divisor que você deseja usar para a escala, ou seja
     <p class="code">gml_pragma(&quot;Texgroup.Scale&quot;, &quot;level1&quot;, &quot;2&quot;);</p>
      Isto fará metade de todo o <span class="notranslate">textures</span> no grupo &quot;level1&quot; <span class="notranslate">texture</span>.
    </li>
    <li>&quot;<b>UnityBuild</b>&quot;, &quot;<b>[habilitar/desabilitar]</b>&quot; - Se você chamar a função com este pragma e definir o argumento habilitar/desabilitar para <span class="inline">true</span>, então, ao compilá-lo, todos os arquivos .cpp do projeto serão colapsados em um único arquivo, que ele então utilizará para construir tudo, por exemplo:
     <p class="code">gml_pragma(&quot;UnityBuild&quot;, &quot;true&quot;);</p>
      O benefício de fazer uma construção de unidade é que as construções são mais rápidas, mas o lado negativo é que ela faz uma construção <i>completa</i> cada vez, portanto, mesmo que você mude uma única parte do código, ela irá construir tudo novamente sem usar nenhum arquivo em cache. Isto foi adicionado especificamente para a exportação do Xbox One usando o YYC, embora possa ser chamado para outros builds<b>(somente YYC</b>). Para mais informações sobre compilações de unidades, por favor, veja <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">aqui</a>.
    </li>
  </ul>
  <p class="note"><b>NOTA</b>: O primeiro argumento para a função <span class="inline">gml_pragma</span> <b>deve ser um tempo de compilação <span class="notranslate">string</span> constante</b> e não uma variável.</p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">gml_pragma(command, [optional...]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td><span class="notranslate">command</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Cordão</a></span></td>
        <td><span class="notranslate">A string with one of the commands listed above.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">[optional]</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Cordão</a></span></td>
        <td><span class="notranslate">Some of the available commands require an optional argument or arguments. These are explained above for each command.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">gml_pragma(&quot;forceinline&quot;);</p>
  <p>O código de exemplo acima forçará a função <span class="notranslate">script</span> onde é usado para ser compilado.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="OS_And_Compiler.htm">OS E Compilador</a></div>
        <div style="float:right">A seguir: <a href="parameter_count.htm"><span class="notranslate">parameter_count</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
gml_pragma
-->
  <!-- TAGS
gml_pragma
-->
</body>
</html>