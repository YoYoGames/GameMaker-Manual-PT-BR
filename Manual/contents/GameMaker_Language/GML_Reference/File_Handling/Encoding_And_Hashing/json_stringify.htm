<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>Com esta função você pode converter um único ou aninhado <span class="notranslate">structs</span> e arrays em um JSON válido <span class="notranslate">string</span>. Você fornece o valor inicial a ser usado (um índice de array ou uma referência <span class="notranslate">struct</span> ) e então a função o &quot;stringificará&quot;, convertendo-o em um JSON string (convertendo <span class="notranslate">GameMaker</span> arrays em JSON arrays, e <span class="notranslate">GameMaker</span> <span class="notranslate">structs</span> em JSON <span class="notranslate">objects</span>).</p>
  <p>Ao utilizar esta função, há algumas coisas importantes a serem observadas:</p>
  <ul class="colour">
    <li>A função <em>não </em> converterá mapas DS, listas ou qualquer outra estrutura de dados em JSON, e simplesmente armazenará o valor interno do índice para a estrutura (que é de pouca utilidade, pois o índice mudará entre execuções do jogo), e como tal, você não deve tentar restringir qualquer valor que possa conter referências a estruturas de dados (para isso você tem <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>A função converterá praticamente qualquer valor em um JSON &quot;válido&quot; <span class="notranslate">string</span>, porém os valores reais contidos no <span class="notranslate">string</span> podem não ser exatamente o que se espera devido à forma como o padrão JSON funciona:<br>
      <br>
      &quot;O JSON é agnóstico em relação aos números. Em qualquer linguagem de programação, pode haver uma variedade de tipos de números de várias capacidades e complementos, fixos ou flutuantes, binários ou decimais. Isso pode tornar difícil o intercâmbio entre diferentes linguagens de programação. O JSON, ao invés disso, oferece apenas a representação de números que os humanos usam: um <span class="notranslate">sequence</span> de dígitos. Todas as linguagens de programação sabem como fazer sentido do dígito <span class="notranslate">sequences</span> mesmo que discordem nas representações internas&quot;.<br>
      <br>
      Para obter mais informações, consulte a <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">Norma ECMA JSON</a>.
    </li>
    <li>Se você incluir uma int64 nos valores a converter para o JSON, ela a escreverá como uma <i>int</i> se estiver no intervalo válido para uma int32, como um <i>duplo</i> se puder fazê-lo sem perder precisão ou (se nenhum desses casos for aplicável) como uma <i>string</i> com um identificador &quot;<span class="inline">@i64@</span>&quot; antes dela e &quot;<span class="inline">$i64$</span>&quot; depois dela. Quando você vier a analisar novamente o JSON, o <span data-keyref="GameMaker Name">GameMaker</span> pegará esses identificadores e reconverterá o valor de volta para uma int64. Isso significa que se o JSON for destinado a um <span class="notranslate">server</span> ou algum outro alvo não GameMaker, esses valores não serão apropriados e, portanto, devem ser evitados.</li>
    <li>Se você incluir <span class="inline">infinity</span>, <span class="inline">-infinity</span> ou <span class="inline">NaN</span> nos valores a converter para o JSON, eles serão codificados como <span class="notranslate">strings</span>, pois esses valores não fazem parte do padrão JSON, e ao analisar o JSON resultante, eles <strong>não </strong>serão convertidos novamente em seus valores <span class="notranslate">runtime</span> e permanecerão como <span class="notranslate">strings</span>. Observe que <span class="inline">NaN</span> será convertido em &quot;nan&quot; (letras minúsculas) após a codificação em cadeia.</li>
    <li>Deve-se tomar cuidado ao escrever qualquer string JSON devolvida para um arquivo <span class="inline">ini</span>, pois as especificações <span class="inline">ini</span> podem causar problemas ao usar citações e caracteres de escape. Veja a função <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a> para mais informações.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">json_stringify(val)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Tipo</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td><span class="notranslate">val</span></td>
        <td><span data-keyref="Type_Struct">Estrutura</span> ou <span data-keyref="Type_Array">Array</span></td>
        <td><span class="notranslate">The reference value for a struct or array to convert into a JSON string</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code"><span data-keyref="Type_String">String</span></p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">var _contents =<br />
    {<br />
        version : &quot;1.0.0&quot;,<br />
        data:<br />
        {<br />
            coins : 4,<br />
            mana : 15,<br />
            playername : &quot;Gurpreet&quot;,<br />
            items :<br />
            [<br />
                ITEM.SWORD,<br />
                ITEM.BOW,<br />
                ITEM.GUITAR<br />
            ]<br />
        }<br />
    };<br />
    <br />
    var _json_string = json_stringify(_contents);
  </p>
  <p>O código acima converterá os <span class="inline2">_contentes</span> <span class="notranslate">struct</span> em um JSON <span class="notranslate">string</span> e armazenará o <span class="notranslate">string</span> em uma variável. O <span class="notranslate">string</span> retornado teria este aspecto:</p>
  <p class="code">{ &quot;data&quot;: { &quot;items&quot;: [ 0.0, 1.0, 2.0 ], &quot;coins&quot;: 4.0, &quot;mana&quot;: 15.0, &quot;playername&quot;: &quot;Gurpreet&quot; }, &quot;version&quot;: &quot;1.0.0&quot; }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="Encoding_And_Hashing.htm">Codificação de arquivos</a></div>
        <div style="float:right">A seguir: <a href="json_parse.htm"><span class="notranslate">json_parse</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>