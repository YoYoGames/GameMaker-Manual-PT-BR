<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>O que é Programação?</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>O que é Programação?</h1>
  <p>Na <a href="Quick_Start_Guide.htm">seção anterior</a>, delineamos como o <span data-keyref="GameMaker Name">GameMaker</span> funciona para criar seu jogo, mas independentemente do <span class="notranslate">sprites</span>, <span class="notranslate">objects</span> ou <span class="notranslate">rooms</span> que você tenha adicionado, nada acontecerá a menos que você o tenha <strong>programado </strong>para acontecer. Mas, o que é um programa?</p>
  <p>No sentido geral, um programa é simplesmente um conjunto de instruções (ou <strong> <a class="glossterm" data-glossterm="declaração" href="#">declaração</a></strong><span class="glossextra">s</span>) que você dá ao computador para dizer-lhe que realize certas tarefas. Estas tarefas podem variar muito desde simplesmente dizer ao computador para desenhar algo para a tela, até calcular um valor baseado em alguma entrada do usuário e depois reagir a ele, mas em todos os casos é uma estrutura lógica que dará algum resultado. Na página anterior, falamos sobre mover uma instância de um <span class="notranslate">object</span> para a direita em 2 pixels, então vamos dar uma olhada no programa real que faria isso:</p>
  <p>Na <span data-keyref="GML_Visual">GML Visual</span>, seria assim:</p>
  <p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>E usando <span data-keyref="GML_Code">o Código GML</span>, seria assim:</p>
  <p class="code">x = x + 2;</p>
  <p>Para entender o que está acontecendo acima, precisamos primeiro falar sobre <strong>Variáveis</strong>, e depois continuaremos a discutir <strong>Funções </strong>e finalmente <strong>Condicionais </strong>, já que estas três coisas são geralmente o que constitui a maior parte de qualquer programa.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">Variáveis</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">As variáveis são a pedra angular da programação, juntamente com as <strong>funções </strong>(que cobriremos brevemente dentro de momentos). Uma variável é simplesmente um <em>valor nomeado</em>, e no caso acima a variável é chamada &quot;<span class="inline">x</span>&quot;. Agora, &quot;<span class="inline">x</span>&quot; pode ser qualquer valor, como -126, ou 583, ou mesmo 1,56378, mas o valor real de &quot;<span class="inline">x</span>&quot; é irrelevante, pois pode variar (daí o nome &quot;variável&quot;). O importante é que pegamos o &quot;<span class="inline">x</span>&quot; e acrescentamos 2 a ele. Vale notar que neste caso &quot;<span class="inline">x</span>&quot; é uma <strong>variável embutida</strong>, o que significa que é uma variável criada pelo <span data-keyref="GameMaker Name">GameMaker</span> para todos os <span class="notranslate">objects</span>, mas você pode criar suas próprias variáveis também.</p>
    <p class="dropspot">Para criar uma variável, ela deve ser <strong>declarada </strong>antes de poder ser utilizada. Declarar uma variável é dizer ao <span data-keyref="GameMaker Name">GameMaker</span> que esta nova variável existe e que ela tem um valor inicial. Para descalcificar uma variável, você simplesmente faria algo assim:</p>
    <p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">ou:</p>
    <p class="code">points = 0;</p>
    <p class="dropspot">Uma vez declarada uma variável, ela pode ser utilizada em outros códigos ou ações programadas. O ótimo das variáveis é que ela permite &quot;reutilizar&quot; um valor em vários lugares, sem realmente ter que se preocupar com o que é o valor. Por exemplo, digamos que você tenha uma variável &quot;<span class="inline">damage</span>&quot; e a utilize em vários lugares para dizer ao <span data-keyref="GameMaker Name">GameMaker</span> para lidar com uma certa quantidade de danos a outros <span class="notranslate">objects</span> no jogo. Podemos declarar o &quot;<span class="inline">damage</span>&quot; como 20, mas mais tarde decidimos que este é um valor muito grande e queremos mudá-lo para 10. Se tivéssemos usado o valor 20 em vez de uma variável, precisaríamos passar por todos os nossos códigos ou ações e mudar 20 para 10, o que consome tempo e é propenso a erros. Entretanto, o uso de uma variável significa que só temos que mudá-la <em>uma vez </em>para 10 quando a declaramos e o resto do código ou ações usarão este novo valor.</p>
    <p class="dropspot">Vale ressaltar que existem muitos tipos diferentes de variáveis, e cada uma tem maneiras ligeiramente diferentes de ser usada. Não vamos cobrir isso aqui, mas você pode encontrar mais informações na seção <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">Visão Geral da Linguagem do GameMaker</a> no manual.</p>
    <p class="dropspot">Entretanto, as variáveis são apenas a primeira parte da história. A próxima parte é o uso de Funções...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">Funções</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">A próxima parte importante da programação é o uso de <strong>funções </strong>junto com variáveis. Uma função é simplesmente uma instrução para o computador fazer algo, e pode ter valores de entrada e de saída (ou seja: você pode dar um valor a ela, e ela fará alguma operação e então retornará um valor diferente), embora nem todas as funções necessitem de entrada, nem têm uma saída. Para entender melhor isto, vejamos uma função integrada no <span data-keyref="GameMaker Name">GameMaker</span>.</p>
    <p class="dropspot">A função que vamos analisar é <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>que em <span class="notranslate">GML</span> Visual é a ação <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">Get Instance Count</a>. Esta função/ação recuperará o número de instâncias de um determinado <span class="notranslate">object</span> no jogo <span class="notranslate">room</span>, e você o usará assim:</p>
    <p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">ou:</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">Em ambos os exemplos acima, a função tem como valor de entrada um ID <span class="notranslate">object</span> (o <strong> <a class="glossterm" data-glossterm="argumento" href="#">argumento</a></strong> ou <strong>parâmetro</strong>) e dará um valor de saída (o valor de <strong>retorno </strong>), que é o número de instâncias do dado <span class="notranslate">object</span> presentes no <span class="notranslate">room</span> quando a função/ação foi chamada. Note que usamos uma variável para armazenar o valor retornado, a variável &quot;<span class="inline">number</span>&quot;. Esta variável pode ser declarada antes que este código seja executado, ou será considerada como sendo declarada quando o código for executado e o valor de retorno da função/ação a ele atribuída.</p>
    <p class="dropspot">Vale notar que você não está limitado apenas a usar as ações visuais construídas em <span class="notranslate">GameMaker Language</span> ou <span class="notranslate">GML</span> e pode realmente construir suas próprias funções para ampliar o que é possível ao programar (você pode saber mais sobre isto <a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">aqui</a> para <span class="notranslate">GML</span> e <a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">aqui</a> para <span class="notranslate">GML</span> Visual).</p>
    <p class="dropspot">Você pode fazer muito com funções e variáveis, porém elas seriam praticamente inúteis sem a peça final importante da história da programação, os <strong>condicionantes</strong>...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">Condicionais</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Uma grande parte da programação é feita de perguntas. Estas perguntas são geralmente simples que podem ser avaliadas como verdadeiras ou falsas, e são chamadas de <strong>condicionantes </strong>(e os valores de <span class="inline">true </span>e <span class="inline">false </span>são chamados de valores <strong>booleanos </strong>). O condicional mais comum e amplamente utilizado é a pergunta &quot;<span class="inline">if</span>&quot;, que é usada para verificar se algo é <span class="inline">true </span>ou <span class="inline">false </span>e depois agir de acordo. Um exemplo simples seria remover um personagem do jogo se sua saúde fosse abaixo de zero, o que em linguagem simples seria expresso como:</p>
    <p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p>
    <p class="dropspot">Para transformar o acima exposto em código, teríamos isto:</p>
    <p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">ou:</p>
    <p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p>
    <p class="dropspot">Então, acima fazemos a pergunta &quot;se a variável hp é menor ou igual a 0&quot; e então, se isso for avaliado como verdadeiro, chamamos a função <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> ou a ação <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Destroy <span class="notranslate">Object</span> Instance</a>. Note que o &quot;<span class="inline">then</span>&quot; (se algo... então algo...) está <em>implícito </em>e você não precisa adicioná-lo, e também note que no código <span class="notranslate">GML</span> utilizamos o aparelho <span class="inline">{} </span>para &quot;bloquear&quot; o código que queremos executar quando o &quot; <span class="inline">if</span>&quot; avalia para <span class="inline">true </span>(em <span class="notranslate">GML</span> Visual isto é simbolizado deixando as ações à <em>direita </em>da ação &quot;<span class="inline">If</span>&quot;). Qualquer coisa adicionada entre as chaves só será executada se o &quot; <span class="inline">if</span>&quot; for avaliado para <span class="inline">true</span>, de modo que você possa ter mais de uma declaração executada em um único &quot;bloco&quot;.</p>
    <p class="dropspot">Mais uma coisa a se notar ao usar o condicional &quot;<span class="inline">if</span>&quot; é que podemos acrescentar uma declaração &quot;<span class="inline">else</span>&quot; a ele também, assim o condicional se tornaria &quot;se algo avalia para <span class="inline">true </span>então faça algo, <em>senão </em>faça algo diferente&quot;. Desta forma, podemos lidar com uma expressão condicional retornando <span class="inline">true </span> <em>ou </em> <span class="inline">false</span>. Vamos dar um exemplo disso também:</p>
    <p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">ou:</p>
    <p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p>
    <p class="dropspot">O código acima se traduz em linguagem simples como:</p>
    <p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else:<br />
      <br />
          subtract one from the countdown variable.
    </p>
    <p class="dropspot">Não se preocupe muito com a parte de criação da instância real do código acima, pois cobriremos isso com mais detalhes nas seções seguintes. O importante a entender aqui é que você pode criar expressões condicionais que verificam se algo é <span class="inline">true </span>ou <span class="inline">false </span>e fazer com que seu programa responda de maneiras diferentes. Isto pode parecer uma coisa muito simples, mas na verdade é incrivelmente poderoso e formará a base de quase tudo o que você faz quando programa no <span data-keyref="GameMaker Name">GameMaker</span>.</p>
  </div>
  <p> </p>
  <p>Então, para responder nossa pergunta de &quot;O que é programação&quot;, podemos dizer que <strong>a programação </strong>está usando uma combinação de <strong>afirmações - </strong> que podem usar <strong> <a class="glossterm" data-glossterm="variável" href="#">variável</a></strong> <span class="glossextra">s</span><strong> </strong>para formar <strong> <a class="glossterm" data-glossterm="expressão" href="#">expressão</a></strong><span class="glossextra">s</span>, <strong>funções </strong>para executar tarefas, e <strong><a class="glossterm" data-glossterm="condicional" href="#">condicional</a></strong> <span class="glossextra">s</span> para fazer perguntas - e, em seguida, executar estas declarações concomitantemente para atingir um objetivo. Abaixo você pode ver um programa um pouco mais complexo em <span class="notranslate">GML</span> Visual e <span class="notranslate">GML</span>. Você pode adivinhar o que ele faz?</p>
  <p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>ou:</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if (mouse_check_button_released(mb_left) == true)<br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">Spoiler</a><span class="expandtext" data-targetname="expanding">O código acima verifica primeiro se um botão do mouse está sendo pressionado (o botão <strong>esquerdo do </strong>mouse, que é definido usando a constante &quot; <span class="inline">mb_left</span>&quot;),
      e se tiver sido pressionado, então move a instância executando o código para a posição atual do mouse (definida usando as variáveis embutidas &quot; <span class="inline">mouse_x</span>&quot; e &quot; <span class="inline">mouse_y</span>&quot;) e
      também define a cor da mistura de instância para o <strong>vermelho</strong>. Se o botão do mouse não tiver sido pressionado, então ele verifica se o botão do mouse foi <strong>solto</strong>, e se ele repõe a cor da mistura da instância para branco (note que
      novamente, usamos algumas <strong>constantes </strong> embutidas <strong>- </strong>&quot; <span class="inline">c_red</span>&quot; e &quot; <span class="inline">c_white</span>&quot; - para definir facilmente as cores).</span></p>
  <p> </p>
  <p>Esperamos que você tenha agora um pouco mais de idéia do que é programação, então vamos passar a explorar a <a class="glossterm" data-glossterm="IDE" href="#">IDE</a> <span data-keyref="GameMaker Name">GameMaker</span> e ver como adicionar <span class="notranslate">assets</span> como <em>sprites </em>e <em>objetos </em>e outros recursos importantes que seu jogo vai precisar.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Content.htm">Índice</a></div>
        <div style="float:right">A seguir: <a href="Creating_Sprites.htm">Criando Sprites</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>